name: CI-Linux

on:
  push:
    branches:
    - main
    - release/*
  pull_request:
    branches:
    - main
    - release/*

env:
  UNITY_HASH: 4016570cf34f
  UNITY_FULL_VERSION: 2021.3.16f1
  
jobs:
  linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout 
      uses: actions/checkout@v1

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'
        include-prerelease: false

    # So far we need Unity assemblies (Managed) and framework 4.7.1 reference assemblies (MonoBleedingEdge/lib/mono/4.7.1-api) for testing
    # We don't need to download/install Unity every run, we just need to cache those managed assemblies
    # But we have to deal with the following:
    # - the cache only works under the GITHUB_WORKSPACE folder (so we cannot cache /Applications/Unity/Unity.app/Contents)
    # - the cache is linited to 400M per run (so we cannot cache the full Unity installation)
    # - When Unity is not installed, our detection logic will fallback to /Applications/Unity/Unity.app/Contents
    - name: Enable Unity Cache Support
      id: cache-unity
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-unitycache-${{ env.UNITY_FULL_VERSION }}
        path: UnityCache

    - name: Download Unity
      if: steps.cache-unity.outputs.cache-hit != 'true'
      run: curl -o ./Unity.tar.xz -k https://download.unity3d.com/download_unity/${{ env.UNITY_HASH }}/LinuxEditorInstaller/Unity.tar.xz

    - name: Install Unity
      if: steps.cache-unity.outputs.cache-hit != 'true'
      run: mkdir -p ~/Unity && tar -xf Unity.tar.xz -C ~/Unity

    - name: Prepare Managed Cache
      if: steps.cache-unity.outputs.cache-hit != 'true'
      run: cp -Rp ~/Unity/Editor/Data/Managed/ UnityCache/

    - name: Prepare MonoBleedingEdge Cache
      if: steps.cache-unity.outputs.cache-hit != 'true'
      run: cp -Rp ~/Unity/Editor/Data/MonoBleedingEdge UnityCache/

    - name: Restore Managed Cache
      if: steps.cache-unity.outputs.cache-hit == 'true'
      run: mkdir -p ~/Unity/Editor/Data/ && cp -Rp UnityCache/Managed/ ~/Unity/Editor/Data/

    - name: Restore MonoBleedingEdge Cache
      if: steps.cache-unity.outputs.cache-hit == 'true'
      run: mkdir -p ~/Unity/Editor/Data/ && cp -Rp UnityCache/MonoBleedingEdge/ ~/Unity/Editor/Data/

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2

    - name: Build
      run: dotnet build -c Debug ./src/Microsoft.Unity.Analyzers.sln /p:UseSharedCompilation=false
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        DOTNET_NOLOGO: 1
          
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Test context (main)
      if: github.ref == 'refs/heads/main'
      run: echo "TEST_FILTER=." >> $GITHUB_ENV
    
    - name: Test context (feature)    
      if: github.ref != 'refs/heads/main'
      run: echo "TEST_FILTER=FullyQualifiedName!~ConsistencyTests" >> $GITHUB_ENV

    - name: Test
      run: dotnet test -c Debug ./src/Microsoft.Unity.Analyzers.Tests --filter ${{env.TEST_FILTER}}
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        DOTNET_NOLOGO: 1
